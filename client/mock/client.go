// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/client.go
//
// Generated by this command:
//
//	mockgen -source=./client/client.go -destination=./client/client.go -package=client
//

// Package client is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/bandprotocol/chain/v2/x/oracle/types"
	"github.com/cosmos/cosmos-sdk/client"
	"github.com/cosmos/cosmos-sdk/crypto/keyring"
	types0 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/tendermint/tendermint/rpc/core/types"
	"go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockClient) GetAccount(account types0.AccAddress) (client.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", account)
	ret0, _ := ret[0].(client.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockClientMockRecorder) GetAccount(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockClient)(nil).GetAccount), account)
}

// GetBalance mocks base method.
func (m *MockClient) GetBalance(account types0.AccAddress) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockClientMockRecorder) GetBalance(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockClient)(nil).GetBalance), account)
}

// GetBlockResult mocks base method.
func (m *MockClient) GetBlockResult(height int64) (*types1.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockResult", height)
	ret0, _ := ret[0].(*types1.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockResult indicates an expected call of GetBlockResult.
func (mr *MockClientMockRecorder) GetBlockResult(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockResult", reflect.TypeOf((*MockClient)(nil).GetBlockResult), height)
}

// GetResult mocks base method.
func (m *MockClient) GetResult(id uint64) (*types.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", id)
	ret0, _ := ret[0].(*types.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResult indicates an expected call of GetResult.
func (mr *MockClientMockRecorder) GetResult(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockClient)(nil).GetResult), id)
}

// GetSignature mocks base method.
func (m *MockClient) GetSignature(id uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignature indicates an expected call of GetSignature.
func (mr *MockClientMockRecorder) GetSignature(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockClient)(nil).GetSignature), id)
}

// GetTx mocks base method.
func (m *MockClient) GetTx(txHash string) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", txHash)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockClientMockRecorder) GetTx(txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockClient)(nil).GetTx), txHash)
}

// QueryRequestFailureReason mocks base method.
func (m *MockClient) QueryRequestFailureReason(id uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRequestFailureReason", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRequestFailureReason indicates an expected call of QueryRequestFailureReason.
func (mr *MockClientMockRecorder) QueryRequestFailureReason(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRequestFailureReason", reflect.TypeOf((*MockClient)(nil).QueryRequestFailureReason), id)
}

// SendRequest mocks base method.
func (m *MockClient) SendRequest(msg *types.MsgRequestData, gasPrice float64, key keyring.Info) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", msg, gasPrice, key)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockClientMockRecorder) SendRequest(msg, gasPrice, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockClient)(nil).SendRequest), msg, gasPrice, key)
}
